// Variables
@use "../tools/variables/form";

// Mixins
@use "../tools/mixins/property";
@use "../tools/mixins/selectors";

@if (form.$illusion-form == true and form.$illusion-custom-select != false) or form.$illusion-custom-select == true {

  /* Highly based on https://github.com/filamentgroup/select-css */

  // Custom select container
  @include selectors.selectors(form.$illusion-custom-select-selector) {
    position: form.$illusion-custom-select-position;
    display: form.$illusion-custom-select-display;
    background: form.$illusion-custom-select-background;

    // Native select invisible except for content
    select {
      @include property.property("width", form.$illusion-custom-select-width);
      @include property.property("margin", form.$illusion-custom-select-margin);
      @include property.property("padding", form.$illusion-custom-select-padding);
      outline: form.$illusion-custom-select-outline;
      box-sizing: form.$illusion-custom-select-box-sizing;
      font-size: form.$illusion-custom-select-font-size;

      &:not([multiple]) {
        @include property.property("height", form.$illusion-custom-select-height);
      }

      &[multiple] {
        position: relative;
        z-index: 3;
        @include property.property("min-height", form.$illusion-custom-select-multiple-height);
        background: inherit;
      }
    }

    // Custom arrow
    &::after {
      content: form.$illusion-custom-select-arrow-content;
      position: form.$illusion-custom-select-arrow-position;
      @include property.property("top", form.$illusion-custom-select-arrow-top);
      @include property.property("right", form.$illusion-custom-select-arrow-right);
      z-index: form.$illusion-custom-select-arrow-z-index;
      pointer-events: form.$illusion-custom-select-arrow-pointer-events;
      @include property.property("width", form.$illusion-custom-select-arrow-width);
      @include property.property("height", form.$illusion-custom-select-arrow-height);
      @include property.property("border-left", form.$illusion-custom-select-arrow-border-horizontal);
      @include property.property("border-right", form.$illusion-custom-select-arrow-border-horizontal);
      @include property.property("border-top", form.$illusion-custom-select-arrow-border-top);
      @include property.property("margin-top", form.$illusion-custom-select-arrow-margin-top);
      display: none;
    }
  }


  // Custom styling when appearance is supported
  /* autoprefixer: ignore next */
  @supports (-webkit-appearance: none) or (appearance: none) or ((-moz-appearance: none) and (mask-type: alpha)) {

    // Display custom arrow
    /* autoprefixer: on */
    @include selectors.selectors(form.$illusion-custom-select-selector) {
      &::after {
        display: form.$illusion-custom-select-arrow-display;
      }

      // Select styling
      select {
        @include property.property("padding-right", form.$illusion-custom-select-padding-right);
        background: none;
        appearance: none;
      }
    }
  }

  // IE 10/11+ - This hides native dropdown button arrow so it will have the custom appearance.
  // Targeting media query hack via http://browserhacks.com/#hack-28f493d247a12ab654f6c3637f6978d5

  // The second rule removes the odd blue bg color behind the text in the select button in IE 10/11 and sets the text color to match the focus style's
  // fix via http://stackoverflow.com/questions/17553300/change-ie-background-color-on-unopened-focused-select-box */

  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {

    // Hide native arrow
    @include selectors.selectors(form.$illusion-custom-select-selector) {
      select::-ms-expand {
        display: none;
      }

      select:focus::-ms-value {
        background: form.$illusion-custom-select-ms-focus-background;
        color: form.$illusion-custom-select-ms-focus-color;
      }

      // Display custom arrow
      &::after {
        display: form.$illusion-custom-select-arrow-display;
      }

      // Styling select
      select {
        padding-right: form.$illusion-custom-select-padding-right; // make room for the arrow
        background: none;
      }
    }
  }

  @if (form.$illusion-custom-select-theme != false) or form.$illusion-custom-select-theme == true {
    // Theming custom-select
    #{form.$illusion-custom-select-selector} {
      border: form.$illusion-custom-select-border;

      select {
        font-family: form.$illusion-custom-select-font-family;
        font-weight: form.$illusion-custom-select-font-weight;
        color: form.$illusion-custom-select-color;
        border: none;
        line-height: form.$illusion-custom-select-line-height;
        @include property.property("padding-top", form.$illusion-custom-select-padding-top);
        @include property.property("padding-bottom", form.$illusion-custom-select-padding-bottom);
        @include property.property("padding-left", form.$illusion-custom-select-padding-left);

        // Focus style
        &:focus {
          outline: form.$illusion-custom-select-focus-outline;
          outline-offset: form.$illusion-custom-select-focus-outline-offset;
        }
      }
    }
  }
}
