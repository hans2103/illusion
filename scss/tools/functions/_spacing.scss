// Globals
@use "sass:map";
@use "sass:meta";
@use "smallestGutter";
@use "mapGetNext";
@use "mapGet";
@use "largestWidth";
@use "../variables/grid";
@use "../variables/warnings";
@use "../functions/lastValue";
@use "../mixins/breakpoint";

// Returns set spacing or calculate current spacing when inside breakpoint

@function spacing($multiplier: 1, $breakpoint: false) {

  // Give a warning when $multiplier is not dividable by 0.5
  @if ($multiplier % 0.5 != 0 and warnings.$illusion-display-warnings != false) {
    @warn 'The `multiplier` in the `spacing` function is designed to work best with a number dividable by 0.5';
  }

  // Set default gutter to smallest one
  $breakpointGutter: smallestGutter.smallestGutter() * $multiplier;

  // If no breakpoint has been set calculate the current breakpoint gutter
  @if $breakpoint == false and breakpoint.$inside-breakpoint != false {

    // Run through each breakpoint and create a new map
    @each $breakpoint, $values in grid.$illusion-grid-breakpoints {

      // Values
      $width: map.get($values, width);
      $gutter: map.get($values, gutter) * $multiplier;
      $nextKey: mapGetNext.map-get-next(grid.$illusion-grid-breakpoints, $breakpoint, lastValue.lastValue());
      $nextWidth: mapGet.map-deep-get(grid.$illusion-grid-breakpoints, $nextKey, "width");
      $largestWidth: largestWidth.largestWidth();

      // Create new temporary map and merge it with the current one
      @if (breakpoint.$inside-breakpoint >= $width and breakpoint.$inside-breakpoint < $nextWidth) or (breakpoint.$inside-breakpoint >= $largestWidth) {
        $breakpointGutter: $gutter;
      }
    }
  }
  @else {
    @if $breakpoint != false {
      $breakpointGutter: mapGet.map-deep-get(grid.$illusion-grid-breakpoints, #{$breakpoint}, "gutter");
    }
  }

  @return $breakpointGutter;
}
