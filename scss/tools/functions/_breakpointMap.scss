// Globals
@use "sass:map";


// Create a new map for the grid
// Adds $from width at correct position

@function grid-breakpoints($fromto) {

  // Variables
  $from: getFrom($fromto);
  $to: getTo($fromto);
  $new-map: ();

  // Run through each breakpoint
  @each $breakpoint, $values in $illusion-grid-breakpoints {

    // Values
    $width: map.get($values, width);
    $gutter: map.get($values, gutter);
    $nextKey: map-get-next($illusion-grid-breakpoints, $breakpoint, #{lastValue()});
    $nextWidth: map-deep-get($illusion-grid-breakpoints, $nextKey, "width");
    $largestWidth: largestWidth();

    // Create new temporary map and merge it with the current (looped) one
    @if $width >= $from and $width < $to {
      $map: (
              #{$breakpoint}: (
                      width: $width,
                      gutter: $gutter
              )
      );
      $new-map: non-destructive-map-merge($new-map, $map);
    }

    // Add custom from in between and merge it with the current (looped) one
    @if ($from > $width and $from < $nextWidth) or ($from > $largestWidth) {
      $map: (
              customFrom: (
                      width: $from,
                      gutter: $gutter
              )
      );
      $new-map: non-destructive-map-merge($new-map, $map);
    }
  }

  // Return the new map
  @return $new-map;
}


// Simple map
// Map with just 1 value for when $gutter is set

@function grid-breakpoint($fromto, $gutter) {

  // Variables
  $from: getFrom($fromto);

  // Set to 0 when $fromto is false
  @if $from == false {
    $from: 0;
  }

  // Create map
  $map: (
          default: (
                  width: $from,
                  gutter: $gutter
          )
  );

  // Return the new map
  @return $map;
}
