// Globals
@use "sass:math";

// Variables
@use "../variables/logical-properties";
@use "../variables/type";

// Functions
@use "../functions/calcInterpolation";
@use "../functions/stripUnit";

// Mixins
@use "breakpoint";
@use "property";

// Fluid property

@mixin fluid-property(
  $property,
  $min-value: type.$illusion-fluid-property-min-value,
  $max-value: type.$illusion-fluid-property-max-value,
  $min-screen: type.$illusion-fluid-property-min-screen,
  $max-screen: type.$illusion-fluid-property-max-screen
) {

  // Variables
  $u1: math.unit($min-screen);
  $u2: math.unit($max-screen);
  $u3: math.unit($min-value);
  $u4: math.unit($max-value);

  @if logical-properties.$illusion-logical-properties {
    @if $u1 == $u2 and $u3 == $u4 {
      @include property.property("#{$property}", clamp(#{$min-value}, calc(#{$min-value} + #{stripUnit.strip-unit($max-value - $min-value)} * ((100vw - #{$min-screen}) / #{stripUnit.strip-unit($max-screen - $min-screen)} * #{math.div($max-screen, $min-screen)})), #{$max-value}));
    }
  } @else {
    @if $u1 == $u2 and $u3 == $u4 {
      #{$property}: $min-value;

      @if (type.$illusion-fluid-property-clamp == false) {
        @include breakpoint.breakpoint($min-screen) {
          #{$property}: calcInterpolation.calc-interpolation($min-screen, $min-value, $max-screen, $max-value);
        }
      }

      @include breakpoint.breakpoint($max-screen) {
        #{$property}: $max-value;
      }

      @if (type.$illusion-fluid-property-clamp != false) {
        @supports (top: clamp(1em, 1vw, 2em)) {
          #{$property}: clamp(#{$min-value}, calc(#{$min-value} + #{stripUnit.strip-unit($max-value - $min-value)} * ((100vw - #{$min-screen}) / #{stripUnit.strip-unit($max-screen - $min-screen)} * #{math.div($max-screen, $min-screen)})), #{$max-value});
        }
      }
    }
  }
}
